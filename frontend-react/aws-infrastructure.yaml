AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure for static React website on S3 with CloudFront'

Parameters:
  DomainName:
    Type: String
    Description: The domain name for the website
    Default: example.com

  SubDomainName:
    Type: String
    Description: The subdomain name for the website
    Default: app

  CertificateARN:
    Type: String
    Description: ARN of ACM certificate for the domain (must be in us-east-1 for CloudFront)
    Default: ''

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${SubDomainName}.${DomainName}'
      AccessControl: Private
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldObjects
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${AWS::StackName}-OAC'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt S3Bucket.RegionalDomainName
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
            S3OriginConfig:
              OriginAccessIdentity: ''
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          Compress: true
          DefaultTTL: 86400 # 1 day
          MinTTL: 0
          MaxTTL: 31536000 # 1 year
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: !If [HasNoCertificate, true, !Ref 'AWS::NoValue']
          AcmCertificateArn: !If [HasCertificate, !Ref CertificateARN, !Ref 'AWS::NoValue']
          SslSupportMethod: !If [HasCertificate, 'sni-only', !Ref 'AWS::NoValue']
          MinimumProtocolVersion: !If [HasCertificate, 'TLSv1.2_2021', !Ref 'AWS::NoValue']
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 10
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 10
        Aliases: !If
          - HasCertificate
          - - !Sub '${SubDomainName}.${DomainName}'
          - !Ref 'AWS::NoValue'

Conditions:
  HasCertificate: !Not [!Equals [!Ref CertificateARN, '']]
  HasNoCertificate: !Equals [!Ref CertificateARN, '']

Outputs:
  WebsiteURL:
    Description: URL for the website
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
  S3BucketName:
    Description: Name of S3 bucket to hold website content
    Value: !Ref S3Bucket
  CloudFrontDistributionId:
    Description: ID of CloudFront distribution
    Value: !Ref CloudFrontDistribution 